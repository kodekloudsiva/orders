name: "DB Apply Migrations"
description: "Apply EF Core migration SQL scripts to a database"

inputs:
  sql-host:
    description: "Database host"
    required: true
  sql-port:
    description: "Database port"
    required: true
  sql-db:
    description: "Database name"
    required: true
  sql-user:
    description: "Database user"
    required: true
  sql-pass:
    description: "Database password"
    required: true
  cicd-sql:
    description: "Path to cicd/sql directory"
    required: true
  runner-download-migrations:
    description: "migration script generated in previous job will be downloaded in this runner machines directory"
    required: true

runs:
  using: "composite"
  steps:
    - uses: actions/download-artifact@v4
      with:
        name: db-migration-scripts
        path: ${{ inputs.runner-download-migrations }}

    - name: Check DB connectivity before applying migration
      shell: bash
      run: |
        echo "🔌 Testing database connection..."
        timeout 15 bash -c "</dev/tcp/${{ inputs.sql-host }}/${{ inputs.sql-port }}" \
          && echo "✅ Database is reachable." \
          || (echo "❌ Database is not reachable." && exit 1)

    # - name: Build SQL Applier Docker Image
    #   shell: bash
    #   run: |
    #     docker build -f ${{ inputs.cicd-sql }}/sql-applier.Dockerfile . -t sql-applier

    - name: Debug migration sql
      shell: bash
      run: |
        echo "📂 Workspace files:"
        ls -lrta ${{ github.workspace }}/runner
        echo "===================================================="
        ls -lrta ${{ github.workspace }}/runner/download
        echo "===================================================="
        ls -lrta ${{ github.workspace }}/runner/download/migrations
        echo "===================================================="
        echo "Looking for migrations in: ${{ inputs.runner-download-migrations }}"
        ls -lrta ${{ inputs.runner-download-migrations }}

    - name: Debug Docker inputs
      shell: bash
      run: |
        echo "SQL_HOST=${{ inputs.sql-host }}"
        echo "SQL_PORT=${{ inputs.sql-port }}"
        echo "SQL_DB=${{ inputs.sql-db }}"
        echo "SQL_USER=${{ inputs.sql-user }}"
        echo "SQL_PASS=${{ inputs.sql-pass }}"
        ls -l ${{ inputs.runner-download-migrations }}/migration.sql || echo "⚠️ migration.sql not found"

    - name: Run SQL Applier to apply migration
      shell: bash
      run: |
        docker run --rm \
          -e DB_HOST="${{ inputs.sql-host }},${{ inputs.sql-port }}" \
          -e DB_NAME=${{ inputs.sql-db }} \
          -e DB_USER=${{ inputs.sql-user }} \
          -e DB_PASS="${{ inputs.sql-pass }}" \
          -v ${{ inputs.runner-download-migrations }}/migration.sql:/app/migration.sql \
          -v ${{ github.workspace }}/cicd/scripts/migration-entrypoint.sh:/app/migration-entrypoint.sh \
          mcr.microsoft.com/mssql-tools:latest \
          /bin/bash /app/migration-entrypoint.sh
