name: Deploy DB Container

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        type: environment  # üëà ties directly into GitHub Environments

env:
  REMOTE_USER: ubuntu
  SQL_REMOTE_APP_DIR: /home/ubuntu/app/ms-sql
  SSH_DIRECTORY: /home/runner/.ssh
  SSH_KEY_PATH: /home/runner/.ssh/id_rsa
  CICD: cicd/
  CICD_API: cicd/api/
  CICD_SQL: cicd/sql/
  CICD_SCRIPTS: cicd/scripts/
  SQL_COMPOSE_FILE: docker-compose-sql.yaml

jobs:
  deploy-db:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    env:
      REMOTE_HOST: ${{ vars.REMOTE_HOST }}
      REMOTE_HOST_SSH_PRIVATE_KEY: ${{ secrets.REMOTE_HOST_SSH_PRIVATE_KEY }}
      SA_PASSWORD: ${{ secrets.SA_PASSWORD }}
    steps:
      - name: ‚úÖ Checkout code
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Make install script executable
        run: chmod +x cicd/scripts/install-docker.sh

      - name: üîê Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.REMOTE_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: üì° Add remote host to known_hosts
        run: ssh-keyscan -H "${{ vars.REMOTE_HOST }}" >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "echo '‚úÖ SSH connection successful'"

      - name: üì§ Copy files to remote server
        run: |
          ssh -i ~/.ssh/id_rsa $REMOTE_USER@${{ vars.REMOTE_HOST }} "mkdir -p $SQL_REMOTE_APP_DIR"
          scp -i ~/.ssh/id_rsa cicd/sql/$SQL_COMPOSE_FILE $REMOTE_USER@${{ vars.REMOTE_HOST }}:$SQL_REMOTE_APP_DIR/
          scp -i ~/.ssh/id_rsa cicd/scripts/install-docker.sh $REMOTE_USER@${{ vars.REMOTE_HOST }}:$SQL_REMOTE_APP_DIR/

      - name: üê≥ Install Docker if needed
        run: ssh -i ~/.ssh/id_rsa $REMOTE_USER@${{ vars.REMOTE_HOST }} "bash $SQL_REMOTE_APP_DIR/install-docker.sh"

      - name: üöÄ Deploy application
        run: |
          ssh -i ~/.ssh/id_rsa $REMOTE_USER@${{ vars.REMOTE_HOST }} << EOF
            set -e
            cd $SQL_REMOTE_APP_DIR
            echo "SA_PASSWORD=${{ secrets.SA_PASSWORD }}" > .env
            sudo docker compose --env-file .env -f $SQL_COMPOSE_FILE pull
            sudo docker compose --env-file .env -f $SQL_COMPOSE_FILE up -d
          EOF
