name: Generate & Apply DB Migrations

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Test, Build & Push API Docker Image"]   # <== Name of build.yaml workflow
    types:
      - completed

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}
  VARIABLE_GITHUB_API: https://api.github.com/repos/${{ github.repository }}/actions/variables
  NEW_DOTNET_IMAGE_TAG: ${{ github.ref_name }}-v-${{ github.run_number }}

jobs:
  db-generate-and-apply-migrations:
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      HAS_MIGRATIONS: ${{ steps.migrations.outputs.HAS_MIGRATIONS }}
    env:
      CICD_SQL: cicd/ms-sql/
      CICD_SCRIPTS: cicd/scripts/
      ORDERS_WEBAPI_PROJECT_PATH: 'orders/orders.webapi'
      ORDERS_DATABASE_PROJECT_PATH: orders/orders.database
      SQL_HOST: ${{ vars.TARGET_DEPLOY_SERVER }}
      SQL_PORT: 1433
      SQL_DB: OrdersDb
      SQL_SA_USER: SA
      SQL_PASS: ${{ secrets.DB_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Install EF Core tools
        run: dotnet tool install --global dotnet-ef

      - name: Add .NET tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      # Get latest & previous migrations
      - name: Get migrations
        id: migrations
        run: |
          echo "📋 Checking EF Core migrations..."
          LAST_MIGRATION=$(dotnet ef migrations list \
            --project orders/orders.database \
            --startup-project orders/orders.webapi \
            --context OrderDbContext | tail -1 || true)

          PREVIOUS_MIGRATION=$(dotnet ef migrations list \
            --project orders/orders.database \
            --startup-project orders/orders.webapi \
            --context OrderDbContext | tail -2 | head -1 || true)

          echo "LAST_MIGRATION=$LAST_MIGRATION"
          echo "PREVIOUS_MIGRATION=$PREVIOUS_MIGRATION"

          if [ -z "$LAST_MIGRATION" ]; then
            echo "HAS_MIGRATIONS=false" >> $GITHUB_OUTPUT
          else
            echo "HAS_MIGRATIONS=true" >> $GITHUB_OUTPUT
          fi

          echo "LAST_MIGRATION=$LAST_MIGRATION" >> $GITHUB_OUTPUT
          echo "PREVIOUS_MIGRATION=$PREVIOUS_MIGRATION" >> $GITHUB_OUTPUT

      - name: Set migration args
        if: steps.migrations.outputs.HAS_MIGRATIONS == 'true'
        run: |
          echo "FROM_MIGRATION=${{ steps.migrations.outputs.PREVIOUS_MIGRATION || '0' }}" >> $GITHUB_ENV
          echo "TO_MIGRATION=${{ steps.migrations.outputs.LAST_MIGRATION }}" >> $GITHUB_ENV
          echo "OUTPUT_SCRIPT=cicd/scripts/migration.sql" >> $GITHUB_ENV

      - name: Build EF Migrator Docker Image
        if: steps.migrations.outputs.HAS_MIGRATIONS == 'true'
        run: |
          docker build --no-cache -f $CICD_SQL/ef-migrator.Dockerfile . \
            --build-arg FROM_MIGRATION=$FROM_MIGRATION \
            --build-arg TO_MIGRATION=$TO_MIGRATION \
            --build-arg OUTPUT_SCRIPT=$CICD_SCRIPTS/migration.sql \
            -t ef-migrator

      - name: Extract SQL script from EF Migrator container
        if: steps.migrations.outputs.HAS_MIGRATIONS == 'true'
        run: |
          docker create --name temp_migrator ef-migrator
          docker cp temp_migrator:sql-scripts/migration.sql ./migration.sql
          docker rm temp_migrator

      - name: Upload SQL migration script as artifact
        if: steps.migrations.outputs.HAS_MIGRATIONS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: efcore-migration-sql
          path: ./migration.sql

      - name: Check DB connectivity before applying migration
        if: steps.migrations.outputs.HAS_MIGRATIONS == 'true'
        run: |
          echo "🔌 Testing database connection..."
          timeout 15 bash -c "</dev/tcp/$SQL_HOST/$SQL_PORT" && echo "✅ Database is reachable." || (echo "❌ Database is not reachable." && exit 1)

      - name: Build SQL Applier Docker Image
        if: steps.migrations.outputs.HAS_MIGRATIONS == 'true'
        run: |
          docker build -f $CICD_SQL/sql-applier.Dockerfile . -t sql-applier

      - name: Run SQL Applier to apply migration
        if: steps.migrations.outputs.HAS_MIGRATIONS == 'true'
        run: |
          docker run --rm \
            -e DB_HOST=$SQL_HOST,$SQL_PORT \
            -e DB_NAME=$SQL_DB \
            -e DB_USER=$SQL_SA_USER \
            -e DB_PASS=$SQL_PASS \
            -v ${{ github.workspace }}/migration.sql:/app/migration.sql \
            sql-applier

      - name: Log migration status (always runs)
        if: always()
        run: echo "🔚 Migration job complete."