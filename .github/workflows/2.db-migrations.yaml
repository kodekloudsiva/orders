name: Generate & Apply DB Migrations

on:
  workflow_run:
    workflows: ["Unit Test & Code Coverage"]   # <== Name of build.yaml workflow
    types:
      - completed
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}
  VARIABLE_GITHUB_API: https://api.github.com/repos/${{ github.repository }}/actions/variables
  NEW_DOTNET_IMAGE_TAG: ${{ github.ref_name }}-v-${{ github.run_number }}

jobs:
  db-generate-and-apply-migrations:
    if: ${{ contains(['main', 'master'], github.event.workflow_run.head_branch) && github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      HAS_MIGRATIONS: ${{ steps.migrations.outputs.HAS_MIGRATIONS }}
    env:
      CICD_SQL: cicd/ms-sql/
      CICD_SCRIPTS: cicd/scripts/
      ORDERS_WEBAPI_PROJECT_PATH: 'orders.webapi'
      ORDERS_DATABASE_PROJECT_PATH: orders.database
      SQL_HOST: ${{ vars.TARGET_DEPLOY_SERVER }}
      SQL_PORT: 1433
      SQL_DB: OrdersDb
      SQL_SA_USER: SA
      SQL_PASS: ${{ secrets.SA_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Install EF Core tools
        run: dotnet tool install --global dotnet-ef

      - name: Add .NET tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Restore dependencies
        run: dotnet restore ./orders.service.sln

      - name: Build solution
        run: dotnet build ./orders.service.sln --configuration Release --no-restore

      - name: List project folders
        run: | 
            pwd
            echo "==================Above is output of pwd command============================================================"
            ls -lrta
            echo "==================Above is output of ls -lrta============================================================"
            ls -lrta ./orders.webapi
            echo "==================Above is output of ls -lrta ./orders.webapi============================================================"
            ls -lrta ./orders.webapi/obj
            echo "==================Above is output of ls -lrta ./orders.webapi/obj============================================================"
            ls -lrta ./orders.webapi/bin
            echo "==================Above is output of ls -lrta ./orders.webapi/bin============================================================"
            ls -lrta ./orders.webapi/bin/Release
            echo "==================Above is output of ls -lrta ./orders.webapi/bin/Release============================================================"
            ls -lrta ./orders.webapi/bin/Release/net8.0
            echo "==================Above is output of ls -lrta ./orders.webapi/bin/Release/net8.0============================================================"

      - name: Get migrations
        id: migrations
        env: 
          ConnectionStrings__DefaultConnection: "Server=DummyServer;Database=DummyDb;User Id=sa;Password=DummyPassword;"
        run: |
          echo "📋 Checking EF Core migrations..."
          MIGRATIONS=$(dotnet ef migrations list \
            --project orders.database \
            --startup-project orders.webapi \
            --configuration Release \
            --context OrderDbContext \
            --no-build --no-connect 2>&1 \
            | grep -E '^[0-9]{14}_.+' || true)

          echo "MIGRATIONS FOUND:"
          echo "$MIGRATIONS"

          MIGRATIONS=$(echo "$MIGRATIONS")
          if [[ -z "$MIGRATIONS" || "$MIGRATIONS" == "No migrations were found." ]]; then
            echo "HAS_MIGRATIONS=false" >> $GITHUB_OUTPUT
          else
            LAST_MIGRATION=$(echo "$MIGRATIONS" | tail -n 1)
            PREVIOUS_MIGRATION=$(echo "$MIGRATIONS" | tail -n 2 | head -n 1)

            echo "HAS_MIGRATIONS=true" >> $GITHUB_OUTPUT
            echo "LAST_MIGRATION=$LAST_MIGRATION" >> $GITHUB_OUTPUT
            echo "PREVIOUS_MIGRATION=$PREVIOUS_MIGRATION" >> $GITHUB_OUTPUT
          fi

      - name: Set migration args
        if: steps.migrations.outputs.HAS_MIGRATIONS == 'true'
        run: |
          if [[ "${{ steps.migrations.outputs.PREVIOUS_MIGRATION }}" == "${{ steps.migrations.outputs.LAST_MIGRATION }}" ]]; then
            # First run → generate from 0
            echo "FROM_MIGRATION=0" >> $GITHUB_ENV
            echo "TO_MIGRATION=${{ steps.migrations.outputs.LAST_MIGRATION }}" >> $GITHUB_ENV
          else
            # Subsequent runs → generate only the delta
            echo "FROM_MIGRATION=${{ steps.migrations.outputs.PREVIOUS_MIGRATION }}" >> $GITHUB_ENV
            echo "TO_MIGRATION=${{ steps.migrations.outputs.LAST_MIGRATION }}" >> $GITHUB_ENV
          fi
      
      
      - name: Build EF Migrator Docker Image
        if: steps.migrations.outputs.HAS_MIGRATIONS == 'true'
        working-directory: ./
        run: |
          echo "fROM mIGRATION pRINTING: "$FROM_MIGRATION
          echo "tO mIGRATION pRINTING: "$TO_MIGRATION
          pwd
          ls -lrta
          docker build --no-cache -f $CICD_SQL/ef-migrator.Dockerfile \
            --build-arg FROM_MIGRATION=$FROM_MIGRATION \
            --build-arg TO_MIGRATION=$TO_MIGRATION \
            --output ./sql-migration-scripts \
            -t ef-migrator .        

      # - name: Extract SQL script from EF Migrator container
      #   if: steps.migrations.outputs.HAS_MIGRATIONS == 'true'
      #   run: |
      #     docker create --name temp_migrator ef-migrator
      #     docker cp temp_migrator:sql-migration-scripts/migration.sql ./migration.sql
      #     docker rm temp_migrator

      - name: Upload SQL migration script as artifact
        if: steps.migrations.outputs.HAS_MIGRATIONS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: efcore-migration-sql
          path: ./sql-migration-scripts/migration.sql

      - name: Check DB connectivity before applying migration
        if: steps.migrations.outputs.HAS_MIGRATIONS == 'true'
        run: |
          echo "🔌 Testing database connection..."
          timeout 15 bash -c "</dev/tcp/$SQL_HOST/$SQL_PORT" && echo "✅ Database is reachable." || (echo "❌ Database is not reachable." && exit 1)

      - name: Build SQL Applier Docker Image
        if: steps.migrations.outputs.HAS_MIGRATIONS == 'true'
        run: |
          docker build -f $CICD_SQL/sql-applier.Dockerfile . -t sql-applier

      - name: Debug migration sql
        run: |
          ls -lrta ${{ github.workspace }}
          file ${{ github.workspace }}/sql-migration-scripts/migration.sql || echo "migration.sql not found"


      - name: Debug Docker inputs
        run: |
          echo "SQL_HOST=${SQL_HOST}"
          echo "SQL_PORT=${SQL_PORT}"
          echo "SQL_DB=${SQL_DB}"
          echo "SQL_SA_USER=${SQL_SA_USER}"
          echo "SQL_PASS=${SQL_PASS}"
          ls -l ${{ github.workspace }}/sql-migration-scripts/migration.sql

      - name: Run SQL Applier to apply migration
        if: steps.migrations.outputs.HAS_MIGRATIONS == 'true'
        run: |
          docker run --rm \
            -e DB_HOST="${SQL_HOST},${SQL_PORT}" \
            -e DB_NAME=$SQL_DB \
            -e DB_USER=$SQL_SA_USER \
            -e DB_PASS="${SQL_PASS}" \
            -v ${{ github.workspace }}/sql-migration-scripts/migration.sql:/app/migration.sql \
            sql-applier

      - name: Log migration status (always runs)
        if: always()
        run: echo "🔚 Migration job complete."