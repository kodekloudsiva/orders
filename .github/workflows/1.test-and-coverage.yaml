name: Unit Test & Code Coverage

on:
  pull_request:        # Runs on PRs into master/main
    branches:
      - main
      - master
  push:                # Runs on direct pushes to non-main branches
    branches-ignore:
      - main
      - master
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}
  VARIABLE_GITHUB_API: https://api.github.com/repos/${{ github.repository }}/actions/variables
  NEW_DOTNET_IMAGE_TAG: ${{ github.ref_name }}-v-${{ github.run_number }}
  CICD_API: cicd/dotnet-api/

jobs:
  code-unit-test-and-coverage:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Install bc
        run: sudo apt-get update && sudo apt-get install -y bc

      - name: Run unit tests with coverage
        run: |
          dotnet test ./orders.test/orders.test.csproj \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Include="[orders.domain]*,[orders.application]*"

      - name: Install ReportGenerator
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool
          echo "${HOME}/.dotnet/tools" >> $GITHUB_PATH

      - name: Generate coverage report
        run: |
          reportgenerator \
            -reports:./TestResults/**/coverage.cobertura.xml \
            -targetdir:CoverageReport \
            "-reporttypes:Html;TextSummary;HtmlSummary;Cobertura;XmlSummary"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ./TestResults/

      - name: Upload code coverage report
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: CoverageReport/

      - name: Install xmllint
        run: sudo apt-get install -y libxml2-utils

      - name: Validate 65% code coverage threshold
        run: |
          COVERAGE_FILE=$(find CoverageReport -name 'Summary.xml')
          if [ ! -f "$COVERAGE_FILE" ]; then
            echo "❌ Coverage report not found."
            exit 1
          fi
          COVERAGE_PERCENT=$(xmllint --xpath "string(//Summary/Linecoverage)" "$COVERAGE_FILE")
          echo "✅ Code coverage: $COVERAGE_PERCENT%"
          if echo "$COVERAGE_PERCENT < 65" | bc -l | grep -q 1; then
            echo "❌ Code coverage ($COVERAGE_PERCENT%) is below the 65% threshold."
            exit 1
          fi
